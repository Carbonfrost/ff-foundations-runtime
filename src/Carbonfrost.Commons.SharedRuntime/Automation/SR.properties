ActivationRequiredServiceMissing=Activating the component failed because a required service subscription was missing (property: `${propertyName}')
AllWhitespace=The argument cannot be the empty string or all whitespace.
AlreadyInitialized=The instance is already initialized.
AssemblyComponentCanOnlyLoadLocalFile=Assembly components can only be loaded from an absolute URI that represents a local file.
AssemblyFullyQualifiedRequired=A fully qualified assembly name is required.
AssemblyInfoFilterFailed=Problem processing the filter `${attrName}` on assembly `${assemblyName}`.
AssemblyNotInContext=The specified assembly, `${assemblyName}', is not in the context of the security context, so the type reference could not be loaded.
BuilderCannotBeSelf=Cannot specify the target type itself for the builder role or another type that itself specifies a builder role: ${type}
CannotActivateNoConstructor=Cannot activate the type `${type}' because it has no available activation constructor.
CannotActivateNoConstructorOrBuilder=Cannot activate the type `${type}' because it has no available activation constructor and no builder defined.
CannotBeNegative=The specified argument cannot be negative.
CannotBeNonNegative=The value for the argument cannot be positive or zero.
CannotBeNonPositive=The specified argument cannot be negative or zero.
CannotBePositive=The value for the argument cannot be positive.
CannotBeZero=The specified argument cannot be equal to zero.
CannotBuildTagUri=Cannot build a tag URI from this instance.  The instance isn't a URL with a valid path and query.
CannotCallStartTwice=The progress callback cannot be started multiple times when the work to do is set to a positive value.
CannotExpandPrefixNotFound=Cannot expand qualified name.  The prefix `${prefix}' was not found.
CannotSeekOrSetPosition=The position of the stream cannot be seeked or set because the stream does not support the operation.
CannotSpecifyPublicKeyToken=PublicKeyToken and PublicKey must not be specified together.
Closed=The instance has been closed.
CollectionCannotBeEmpty=An empty collection is not valid for this argument.
CollectionCannotCopyToMultidimensionalArray=Cannot copy the collection contents to a multidimensional array.
CollectionContainsNullElement=An element in the collection is null.
CollectionCountOutOfRange=The specified count must be greater than or equal to 0 and less than the total number of items in the collection less the index offset (${lowerBound} to ${upperBound}, inclusive).
CollectionFixedSize=The operation is not supported for collections that are fixed size.
CollectionIndexOutOfRange=The specified index must be between ${lowerBound} and ${upperBound}, inclusive.
CollectionIndexOutOfRangeNoElements=The specified index is out of range for the collection.
ComparisonOperandsMustMatch=The types of the comparison operands do not match.
ComponentTypeCannotBeAnything=Expected a valid component type, not a wildcard type.
ConcreteClassError=Unexpected result from the concrete class provider for `${type}`.  Concrete class result must extend the base type and may not be abstract or an interface.
ContentTypeNotStandard=Specified type is not one of the supported standard types for an Internet media type.
CouldNotActivateProperty=Failed to activate property `${propertyName}'.
DirectedStreamCannotRead=The stream is directed and reading is not permitted or the base stream cannot read.
DirectedStreamCannotWrite=The stream is directed and writing is not permitted or the base stream cannot write.
Disposed=Cannot utilize '${instanceName}' after the instance has been disposed.
Empty=<empty>
EmptyCollectionNotValid=An empty collection is not valid for this argument.
EmptyStringNotValid=The empty string is not valid for the argument.
Error=[Error]
EventMissing=The specified event, ${eventName}, does not exist or cannot be converted to the required type.
EventObsolete=The specified event, ${eventName} is obsolete: ${message}
EventPreliminary=The specified event, ${eventName} is preliminary: ${message}
Expected=Expected: `${expectedCharOrString}'
ExpectedIdentifier=Expected: 'identifier'.
ExpectedLeftBraceOrDollar=Expected: '{{' or '$'.
ExpectedRightBrace=Expected: '}'
FailedToGenerateProxy=Failed to generate a dynamic proxy for an instance of type ${instanceType}.  A required interface or base type couldn't be implemented.
ForbiddenStreamStreamContext=The `stream:' protocol cannot be used as a stream context type.
ForbiddenType=The specified type cannot be used for the argument: ${argumentType}.
IncompleteEscapeSequence=Unrecognized or incomplete escape sequence.
InvalidProviderDeclared=Invalid provider `${type}': ${ex}
InvalidProviderFieldOrMethod=Given provider field or method is not valid because it is not static or has a return type that doesn't extend the provider base type.
InvalidProviderInstanceType=Given provider instance type is not valid because it is abstract or doesn't extend the provider base type.
ItemAlreadyExists=The specified item already exists within the collection: ${itemExists}.
ItemRequiredToExistInCollection=The item is required to exist in the collection.
KeyAlreadyExists=The specified key or identifier, ${key}, cannot be added to the collection because it already exists.
LateBoundTypeFailure=Late-bound loading of a type `${typeName}' that was referenced by a component has failed.
MinMustBeLessThanMax=The minimum value must be less than or equal to the maximum value.
Modified=The enumeration may not complete because the collection has been modified.
MultipleNamespaces=Multiple namespaces matched the given selection.
MultipleProviders=Multiple providers match the given criteria.
NaN=The value is not-a-number, which is not valid for this argument.
NoAcceptableStreamingSource=No acceptable streaming source could be created for the required output type, ${type}.
NoAdapterForRole=No adapter can supply the conversion from the source type `${sourceType}' to the needed adapter role, `${adapterRole}'.
NotAnyRequiredType=The type, ${actualType}, is not one of the required types, ${requiredTypes}.
NotAssignableFrom=The type `${argumentType}' cannot be assigned to the required type, `${requiredType}' because it is not a subclass or implementer of the required type.
NotCompliantIdentifier=The identifier (${name}) is not compliant with the required level, ${complianceLevel}.
NotCompliantIdentifier2=The specified identifier is not compliant.
NotEnoughSpaceInArray=Given the index, there is not enough space in the array.
NotInitialized=The operation cannot continue in the current state because the instance has not been initialized.
NotInstanceOf=The value is not an instance of the required type, `${requiredType}'.
NotRequiredType=The instance type is ${actualType}, but it is not of the required type, ${requiredType}.
NotSubclassOf=The type `${argumentType}' is not a subclass of the required type, `${requiredType}'.
NotSupportedIdentityKey=The key, '${keyName}', is not supported for an identity.
NotValidComponentUriNamePart=Invalid value for name part of component URI.
NotValidComponentUriSourcePart=Invalid text or unsupported scheme for source part of component URI.
NotValidDataUri=The URI does not represent a valid data: URI.
NotValidHexString=The input string does not represent a valid hexadecimal byte array.
NotValidLocalName=Local name contains an illegal character.
NotValidPathCharacter=The path '${pathText}' contains an invalid character or does not identify a supported path name.
NotWithinEnum=The specified value is not within the defined values for the enumeration type, ${enumType}.
NullableMustHaveValue=The given nullable argument must have a value.
OnlyTypedAdapterFactory=Only an instance of the strongly typed adapter factory type, AdapterFactory<T>, or one of its constructed generic subtypes can be used as an argument.
OutOfRangeInclusive=The value must be in the range ${min} to ${max}, inclusive.
OutsideEnumeration=The operation is not valid because the enumerator is positioned before or after the enumeration body.
ParseFailure=The text cannot be parsed into a valid instance of type '${typeName}'.
ProgressCallbackNotStarted=The progress callback cannot consume units until Start() has been invoked.
PropertiesCategoryMissingBrackets=A category name must be specified in brackets.
PropertiesParseKeyNameExpected=Parser error: Expected key.
PropertyConversionFailed=Property `${name}': Cannot convert ${value} to the required type.
PropertyDeclarationMissingKey=The property declaration does not specify a key.
PropertyMissing=The specified property, ${propertyName}, does not exist or cannot be converted to the required type.
PropertyMustBeSet=The property, ${propertyName}, is expected to be set.
PropertyNotFound=Property with the given name was not found, ${propertyName}.
PropertyObsolete=The specified property, ${propertyName} is obsolete: ${message}
PropertyPreliminary=The specified property, ${propertyName} is preliminary: ${message}
PublicTypeRequiredAdapter=A public type is required for the output adapter: ${type}.
PublishAttributeTypeMismatch=The given member `${memberInfo}' has a return type or the return result that does not match the service type contract, `${serviceType}`.
QualifiedNameCannotBeGeneratedFromConstructed=Qualified names cannot be created for array, byref, or pointer types, or for constructed generic types or generic parameters.
ReadOnlyCollection=The operation cannot proceed because the collection is read-only.
ReadOnlyProperty=The property, `${propertyName}' cannot be modified because it is read-only.
ReadOnlyPropertyNoName=The property cannot be modified because it is read-only.
RequiredSubscriptionConstructor=Cannot activate the constructor because no argument value is defined (activating constructor: ${constructor}, parameter: ${parameterName})
SealableNotSealed=The operation cannot continue because the instance is not sealed.
SealableReadOnly=Once sealed, the object cannot be modified.
SeekDirectionIncompatible=The specified or implied seek direction is incompatible with the seek directions permitted on the stream.
SeekNotSupportedByBase=The stream cannot be seeked because the base stream does not support seeking.
ServiceAlreadyExists=A service bound to the given name or type already exists in the service container: `${serviceNameOrType}'.
ServiceFailedToStart=Failed to start service: `${serviceType}'
ServiceNotFound=The specified service, `${nameOrType}', was not found.
StreamCannotRead=The stream cannot be read, but it is expected to be readable.
StreamCannotWrite=The stream cannot be written to, but it is expected to be writable.
StreamContextDoesNotExist=The target of the specified stream context either does not exist or cannot be opened with the specified file access.
TemplateNotFound=Template with the given name not found: ${template}
TypeMissing=The type was not found: ${typeReference}.
TypeMissingFromQualifiedName=Could not load type because no type matches the qualified name: ${name}
TypeNotCastableAdaptable=The type, `${typeName}', is not of the required type(s), '${requiredType}', and there is no suitable adapter factory in the service context to supply the conversion.
UnexpectedEof=The file ended unexpectedly when the reader expected more data.
UnexpectedlyNull=A required value was unexpectedly null.
UnknownAdapterRole=Specified adapter role is not known: ${name}.
UnknownUriScheme=Unknown or unsupported URI scheme for objects of type `${type}'
UseProviderRegistrationAttributeOverload=Don't use this attribute constructor to specify custom provider registration.  Use the overload that accepts the type.
ValueTypesNotSupported=Value types are not supported in this context.
